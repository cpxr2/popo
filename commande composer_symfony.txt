A retenir : 

$em = $this->getDoctrine()->getManager(); // Permet de récupéré le manager de base de données
$em->persist($model); // Permet d'ajouter un modèle instancié avec new dans la base de données
$em->remove($model); // Permet de supprimer un modèle récupéré à partir d'un repository
$repo = $em->getRepository('AppBundle:NomDuModel'); // Permet de récupéré le repository d'un type de modèle précis
$repo->find($id); // Permet de recherché une entrée dans la table avec comme id : $id.
$em->flush(); // Permet de prendre en compte les changements effectué avec la base de données.
$date = new \DateTime();


*cree un nouveau projet symfony avec composer

composer create-project symfony/framework-standard-edition nom_du_projet

*creation de la base de donnée (dans le dossier qu'on a crée au dessus)

php bin/console doctrine:database:create

*creer une table

php bin/console generate:doctrine:entity

puis NomBundle:NomEntité ex: AppBundle:Blog
puis on remplis les champ(field) de la table

*verification avant de crée la Table

php bin/console doctrine:schema:update --dump-sql

*Ceation de la table

php bin/console doctrine:schema:update --force

*lancer un serveur

php bin\console server:run

*une route dans le controleur en "annotation"

     /**
     * @Route("/test", name="test")
     */
    public function testAction()
    {
        return new Response("Test action !");
    }

*Supprimer un utilisateur

$em->remove($utilisateur);
            $em->flush();

*modifier un utilisateur

$utilisateur->setPseudo('admin modifié');

*Créer un article dans le BDD

/**
     * @Route("/article/nouveau", name="article_nouveau")
     */
    public function articleNouveauAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
            
        $article = new Article();
        $article->setTitre('untruc');
        $article->setContenu('c\est un truc trop chouette.');
        $article->setDate(new \DateTime("01-08-2017"));
        $article->setAuteur('Mr.Machin');
        
        $em->persist($article);
        $em->flush();
        
        return new Response ('Article créer ou pas');
    }

*	$_POST et $_GET
->request pour le $_POST "$request->request->get('pseudo');"
->query pour le $_GET "$request->query->get('pseudo');"


*organiser son formulaire
<div>
{{form_label (form.pseudo)}}
ecris le label

form_error()
ecris un <ul><li>avec les message d'erreur dedan

form_widget()
ecris le <input>
</div>

{{ form_row (form.pseudo)}}
créer les 3 en un coup.




********************TWIG***********************

{{ remplace 'echo' }}
{%  pour utiliser des condition ou des boucle.  %}

s'ecris dans app/ressource/views
on ecris les vues dans un dossier qui porte le nom du controller. "ex: une vue article dans un dossier app/ressource/views/article"

les block------
*les block servent surtout pour les JS le CSS et le body pour s'assurer qu'ils seront placés au bon endrois.

*{% block body %}{% endblock %}
  "body" est le nom que l'on a choisi pour le block.

*pour lier le fichier base.html.twig au ficher test.html.twig
{% extends 'base.html.twig' %}

*les conditions
{% if ma_Variable is defined %}
{% if ma_Variable == 'kékechose %}.....

*les modificateurs
{{ma_Variable | upper}} met en majuscule
{{ma_Variable | length}} donne le nombre de charactere....





